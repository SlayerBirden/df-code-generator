<?php
declare(strict_types=1);

namespace SlayerBirden\DFCodeGeneration\Generator\Tests\Api;

use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\Parameter;
use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\PsrPrinter;
use SlayerBirden\DFCodeGeneration\Generator\DataProvider\DataProviderInterface;
use SlayerBirden\DFCodeGeneration\Generator\GeneratorInterface;
use Twig\Environment;
use Twig\Loader\FilesystemLoader;

final class GetsGenerator implements GeneratorInterface
{
    /**
     * @var DataProviderInterface
     */
    private $dataProvider;
    /**
     * @var Environment
     */
    private $twig;

    public function __construct(DataProviderInterface $dataProvider)
    {
        $this->dataProvider = $dataProvider;
        $loader = new FilesystemLoader(__DIR__ . '/Templates');
        $this->twig = new Environment($loader);
    }

    /**
     * @return string
     * @throws \Twig_Error_Loader
     * @throws \Twig_Error_Runtime
     * @throws \Twig_Error_Syntax
     */
    public function generate(): string
    {
        $file = new PhpFile();
        $file->setStrictTypes();
        $file->addComment('This file is generated by SlayerBirden\DFCodeGeneration');

        $namespace = $file->addNamespace($this->getNameSpace());

        $namespace->addUse('codecept\ApiTester');
        $namespace->addUse('Codeception\Util\HttpCode');
        $namespace->addUse($this->dataProvider->provide()['entityName']);
        if ($this->dataProvider->provide()['has_owner']) {
            $namespace->addUse('SlayerBirden\DataFlowServer\Domain\Entities\User');
        }

        $class = $namespace->addClass('GetsCest');

        $class->addMethod('_before')
            ->setParameters([
                (new Parameter('I'))->setTypeHint('\codecept\ApiTester'),
            ])
            ->setBody(
                $this->twig->load('Gets/before.template.twig')->render($this->dataProvider->provide())
            )
            ->setReturnType('void')
            ->setVisibility(ClassType::VISIBILITY_PUBLIC);

        $class->addMethod('getAll' . $this->dataProvider->provide()['pluralEntityName'])
            ->setParameters([
                (new Parameter('I'))->setTypeHint('\codecept\ApiTester'),
            ])
            ->setBody(
                $this->twig->load('Gets/get.all.template.twig')->render($this->dataProvider->provide())
            )
            ->setReturnType('void')
            ->setVisibility(ClassType::VISIBILITY_PUBLIC);

        $class->addMethod('getSecondPage' . $this->dataProvider->provide()['pluralEntityName'])
            ->setParameters([
                (new Parameter('I'))->setTypeHint('\codecept\ApiTester'),
            ])
            ->setBody(
                $this->twig->load('Gets/get.secondpage.template.twig')->render($this->dataProvider->provide())
            )
            ->setReturnType('void')
            ->setVisibility(ClassType::VISIBILITY_PUBLIC);

        $class->addMethod('getFiltered' . $this->dataProvider->provide()['pluralEntityName'])
            ->setParameters([
                (new Parameter('I'))->setTypeHint('\codecept\ApiTester'),
            ])
            ->setBody(
                $this->twig->load('Gets/get.filtered.template.twig')->render($this->dataProvider->provide())
            )
            ->setReturnType('void')
            ->setVisibility(ClassType::VISIBILITY_PUBLIC);

        $class->addMethod('getSorted' . $this->dataProvider->provide()['pluralEntityName'])
            ->setParameters([
                (new Parameter('I'))->setTypeHint('\codecept\ApiTester'),
            ])
            ->setBody(
                $this->twig->load('Gets/get.sorted.template.twig')->render($this->dataProvider->provide())
            )
            ->setReturnType('void')
            ->setVisibility(ClassType::VISIBILITY_PUBLIC);

        $class->addMethod('getNoResultsFiltered' . $this->dataProvider->provide()['pluralEntityName'])
            ->setParameters([
                (new Parameter('I'))->setTypeHint('\codecept\ApiTester'),
            ])
            ->setBody(
                $this->twig->load('Gets/get.noresfiltered.template.twig')->render($this->dataProvider->provide())
            )
            ->setReturnType('void')
            ->setVisibility(ClassType::VISIBILITY_PUBLIC);

        $class->addMethod('getWrongFiltered' . $this->dataProvider->provide()['pluralEntityName'])
            ->setParameters([
                (new Parameter('I'))->setTypeHint('\codecept\ApiTester'),
            ])
            ->setBody(
                $this->twig->load('Gets/get.wrongfiltered.template.twig')->render($this->dataProvider->provide())
            )
            ->setReturnType('void')
            ->setVisibility(ClassType::VISIBILITY_PUBLIC);

        return (new PsrPrinter())->printFile($file);
    }

    public function getClassName(): string
    {
        return $this->getNameSpace() . '\\' . 'GetsCest';
    }

    public function getFileName(): string
    {
        return sprintf(
            'tests/api/%s/%s/GetsCest.php',
            strtolower($this->dataProvider->provide()['moduleName']),
            $this->dataProvider->provide()['refName']
        );
    }

    private function getNameSpace(): string
    {
        return sprintf(
            'codecept\%s\%s',
            strtolower($this->dataProvider->provide()['moduleName']),
            $this->dataProvider->provide()['refName']
        );
    }
}
