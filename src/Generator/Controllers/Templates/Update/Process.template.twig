$data = Parser::getRequestBody($request);
$entity = $request->getAttribute(ResourceMiddlewareInterface::DATA_RESOURCE);
$this->inputFilter->setData($data);

if (!$this->inputFilter->isValid()) {
    return (new ValidationResponseFactory())('{{ refName }}', $this->inputFilter);
}
try {
    $this->hydrator->hydrate($data, $entity);
    $em = $this->managerRegistry->getManagerForClass(DbConfiguration::class);
    $em->persist($entity);
    $em->flush();
    $msg = '{{ entityClassName }} has been updated!';
    return (new GeneralSuccessResponseFactory())($msg, '{{ refName }}', $this->hydrator->extract($entity));
} catch (ORMInvalidArgumentException $exception) {
    return (new GeneralErrorResponseFactory())($exception->getMessage(), '{{ refName }}', 400);
{% if hasUnique %}
} catch (UniqueConstraintViolationException $exception) {
    return (new GeneralErrorResponseFactory())('{{ uniqueIdxMessage }}', '{{ refName }}', 400);
{% endif %}
} catch (ORMException $exception) {
    $this->logger->error((string)$exception);
    return (new GeneralErrorResponseFactory())('Error while updating {{ refName }}.', '{{ refName }}', 400);
}
